[{"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\reportWebVitals.js":"1","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\App.js":"2","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\config\\fire.js":"3","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\config\\Fire.js":"4","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Login.js":"5","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Signup.js":"6","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\dataManagement\\DataLayer.js":"7","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\dataManagement\\Reducer.js":"8","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Profile.js":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":3597,"mtime":1606289130476,"results":"12","hashOfConfig":"11"},{"size":514,"mtime":1606192514052,"results":"13","hashOfConfig":"11"},{"size":514,"mtime":1606192514052,"results":"14","hashOfConfig":"11"},{"size":5811,"mtime":1606283598677,"results":"15","hashOfConfig":"11"},{"size":11744,"mtime":1606283585603,"results":"16","hashOfConfig":"11"},{"size":390,"mtime":1606201095516,"results":"17","hashOfConfig":"11"},{"size":375,"mtime":1606237844621,"results":"18","hashOfConfig":"11"},{"size":3656,"mtime":1606286445206,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"sq6bdb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\reportWebVitals.js",[],["41","42"],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\App.js",["43"],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\config\\fire.js",[],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\config\\Fire.js",[],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Login.js",["44","45"],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Signup.js",["46"],"import React, { useRef } from 'react'\r\nimport fire from '../config/fire';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDataLayerValue } from '../dataManagement/DataLayer';\r\nimport '../styling/Signup.css'\r\n\r\nfunction Signup() {\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm();\r\n    const db = fire.database().ref('user')\r\n\r\n    //used for to compare password and re_password\r\n    const password = useRef({});\r\n    password.current = watch(\"password\", \"\");\r\n\r\n    //save data to database and send emailVarificationLink\r\n    const onSubmit = (value) => {\r\n        fire.auth().createUserWithEmailAndPassword(value.email, value.password).then((user) => {\r\n            fire.auth().currentUser.sendEmailVerification()\r\n            document.getElementById(\"form\").reset()\r\n            toast.info(\"Varification email is sent!\")\r\n            const key = value.email.split(\"@\")[0]\r\n            db.child(key).set(value)\r\n        }).catch(err => {\r\n            toast.error(err.message);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container is-flex\" style={{width: \"100%\", justifyContent: \"center\"}}>\r\n            <div className=\"is-flex form\" style={{flexDirection: \"column\", marginTop: \"40px\", alignItems: \"center\", width: \"50%\"}}>\r\n                <form onSubmit={handleSubmit(onSubmit)} style={{width: \"100%\"}} id=\"form\">\r\n                    <div className=\"is-flex\" style={{flexDirection: \"column\"}}>\r\n                        {/* name */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Name</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"text\"\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"xyz\"\r\n                                    aria-invalid={errors.name ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Name is required\", \r\n                                                    maxLength: {\r\n                                                        value: 30,\r\n                                                        message: \"Max length exceeded\"\r\n                                                    } })}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-user\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.name && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.name.message}</p>}\r\n                        </div>\r\n\r\n                        {/* dob */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Date Of Birth</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"date\"\r\n                                    id=\"dob\"\r\n                                    name=\"dob\"\r\n                                    aria-invalid={errors.dob ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Date of birth is required\"})}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.dob && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.dob.message}</p>}\r\n                        </div>\r\n                        \r\n                        {/* pob */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Place Of Birth</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"text\"\r\n                                    id=\"pob\"\r\n                                    name=\"pob\"\r\n                                    placeholder=\"Vadodara\"\r\n                                    aria-invalid={errors.pob ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Place of birth is required\", \r\n                                                    maxLength: {\r\n                                                        value: 30,\r\n                                                        message: \"Max length exceeded\"\r\n                                                    } })}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-map-marker\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.pob && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.pob.message}</p>}\r\n                        </div>\r\n\r\n                        {/* age */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Age</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"number\"\r\n                                    id=\"age\"\r\n                                    name=\"age\"\r\n                                    placeholder=\"22\"\r\n                                    aria-invalid={errors.age ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Age is required\", \r\n                                                    min: {\r\n                                                        value: 0,\r\n                                                        message: \"Age can not be negative value\"\r\n                                                    } })}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-address-card\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.age && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.age.message}</p>}\r\n                        </div>\r\n\r\n                        {/* email */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Email</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"email\"\r\n                                    id=\"email\"\r\n                                    name=\"email\"\r\n                                    placeholder=\"xyz@gmail.com\"\r\n                                    aria-invalid={errors.email ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Email is required\"})}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.email && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.email.message}</p>}\r\n                        </div>\r\n\r\n                        {/* password */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Password</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    placeholder=\"*******\"\r\n                                    aria-invalid={errors.password ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Password is required\",\r\n                                                    minLength: {\r\n                                                        value: 8,\r\n                                                        message: \"Password must have at least 8 characters\"\r\n                                                    },\r\n                                                    validate: value => value.match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/)\r\n                                                        || \"Password must contain atleast 1 capital letter, 1 special character and 1 digit\"\r\n                                                })}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-key\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.password && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.password.message}</p>}\r\n                        </div>\r\n\r\n                        {/* confirm password */}\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Confirm Password</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input\"\r\n                                    type=\"password\"\r\n                                    id=\"repassword\"\r\n                                    name=\"repassword\"\r\n                                    placeholder=\"*******\"\r\n                                    aria-invalid={errors.repassword ? \"true\" : \"false\"}\r\n                                    ref={register({ required: \"Confirm password is required\",\r\n                                        minLength: {\r\n                                            value: 8,\r\n                                            message: \"Password must have at least 8 characters\"\r\n                                        },\r\n                                        validate: value => value === password.current || \"The passwords do not match\" })}\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-key\" aria-hidden=\"true\"></i>\r\n                                </span>\r\n                            </div>\r\n                            {errors.repassword && <p className=\"help is-danger\"><span style={{color: \"red\"}}>*</span>{errors.repassword.message}</p>}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{marginTop: \"20px\", textAlign: \"center\"}}>\r\n                        <button className=\"button is-link is-rounded is-outlined\" style={{width: \"40%\"}}>Signup</button>\r\n                    </div>   \r\n                </form>\r\n            </div>\r\n            <ToastContainer position=\"bottom-right\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\dataManagement\\DataLayer.js",[],["47","48"],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\dataManagement\\Reducer.js",[],"C:\\Users\\LENOVO\\Desktop\\Career\\Internship\\TWF Flours\\twf-flours\\src\\component\\Profile.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":37,"column":6,"nodeType":"55","endLine":37,"endColumn":8,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":12,"column":13,"nodeType":"59","messageId":"60","endLine":12,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":103,"column":25,"nodeType":"63","endLine":103,"endColumn":88},{"ruleId":"57","severity":1,"message":"64","line":6,"column":10,"nodeType":"59","messageId":"60","endLine":6,"endColumn":27},{"ruleId":"49","replacedBy":"65"},{"ruleId":"51","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListner'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useDataLayerValue' is defined but never used.",["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [authListner]",{"range":"72","text":"73"},[1032,1034],"[authListner]"]